{"version":3,"file":"BruteForce-ByHXA7p8.js","sources":["../../src/stores/bruteforceStore.ts","../../src/components/bruteforce/NewAttackModal.tsx","../../src/components/bruteforce/AttackCard.tsx","../../src/pages/BruteForce.tsx"],"sourcesContent":["import { create } from 'zustand';\nimport { BruteForceState, BruteForceTarget } from '../types/bruteforce';\n\nexport const useBruteForceStore = create<BruteForceState>((set) => ({\n  targets: [],\n  activeAttacks: 0,\n  addTarget: (host: string, port: number, service) => {\n    const newTarget: BruteForceTarget = {\n      id: crypto.randomUUID(),\n      host,\n      port,\n      service,\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      attempts: 0,\n      successCount: 0,\n      credentials: [],\n    };\n    set((state) => ({\n      targets: [newTarget, ...state.targets],\n      activeAttacks: state.activeAttacks + 1,\n    }));\n  },\n  removeTarget: (id: string) => {\n    set((state) => ({\n      targets: state.targets.filter((target) => target.id !== id),\n    }));\n  },\n  updateTarget: (id: string, updates: Partial<BruteForceTarget>) => {\n    set((state) => ({\n      targets: state.targets.map((target) =>\n        target.id === id ? { ...target, ...updates } : target\n      ),\n    }));\n  },\n}));","import React, { useState } from 'react';\nimport { Dialog } from '@headlessui/react';\nimport { X } from 'lucide-react';\nimport { useBruteForceStore } from '../../stores/bruteforceStore';\nimport { BruteForceTarget } from '../../types/bruteforce';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function NewAttackModal({ isOpen, onClose }: Props) {\n  const [host, setHost] = useState('');\n  const [port, setPort] = useState('');\n  const [service, setService] = useState<BruteForceTarget['service']>('SSH');\n  const addTarget = useBruteForceStore((state) => state.addTarget);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (host.trim() && port) {\n      addTarget(host.trim(), parseInt(port, 10), service);\n      setHost('');\n      setPort('');\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} className=\"relative z-50\">\n      <div className=\"fixed inset-0 bg-black/30\" aria-hidden=\"true\" />\n      <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n        <Dialog.Panel className=\"mx-auto max-w-md rounded-lg bg-gray-900 p-6 border border-gray-800\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <Dialog.Title className=\"text-lg font-medium text-white\">\n              New Brute Force Attack\n            </Dialog.Title>\n            <button onClick={onClose} className=\"text-gray-400 hover:text-white\">\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"host\" className=\"block text-sm font-medium text-gray-300\">\n                Target Host\n              </label>\n              <input\n                type=\"text\"\n                id=\"host\"\n                value={host}\n                onChange={(e) => setHost(e.target.value)}\n                className=\"mt-1 block w-full rounded-md border border-gray-700 bg-gray-800 text-white px-3 py-2 text-sm focus:border-[#8B5CF6] focus:outline-none focus:ring-1 focus:ring-[#8B5CF6]\"\n                placeholder=\"example.com\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"port\" className=\"block text-sm font-medium text-gray-300\">\n                Port\n              </label>\n              <input\n                type=\"number\"\n                id=\"port\"\n                value={port}\n                onChange={(e) => setPort(e.target.value)}\n                className=\"mt-1 block w-full rounded-md border border-gray-700 bg-gray-800 text-white px-3 py-2 text-sm focus:border-[#8B5CF6] focus:outline-none focus:ring-1 focus:ring-[#8B5CF6]\"\n                placeholder=\"22\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"service\" className=\"block text-sm font-medium text-gray-300\">\n                Service\n              </label>\n              <select\n                id=\"service\"\n                value={service}\n                onChange={(e) => setService(e.target.value as BruteForceTarget['service'])}\n                className=\"mt-1 block w-full rounded-md border border-gray-700 bg-gray-800 text-white px-3 py-2 text-sm focus:border-[#8B5CF6] focus:outline-none focus:ring-1 focus:ring-[#8B5CF6]\"\n              >\n                <option value=\"SSH\">SSH</option>\n                <option value=\"FTP\">FTP</option>\n                <option value=\"HTTP\">HTTP</option>\n              </select>\n            </div>\n\n            <div className=\"flex justify-end space-x-3\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-4 py-2 text-sm text-gray-300 hover:text-white\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-4 py-2 bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED] text-sm\"\n              >\n                Start Attack\n              </button>\n            </div>\n          </form>\n        </Dialog.Panel>\n      </div>\n    </Dialog>\n  );\n}","import React from 'react';\nimport { BruteForceTarget } from '../../types/bruteforce';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Activity, AlertTriangle, CheckCircle, XCircle, Lock } from 'lucide-react';\nimport clsx from 'clsx';\n\ninterface Props {\n  target: BruteForceTarget;\n  onRemove: (id: string) => void;\n}\n\nexport function AttackCard({ target, onRemove }: Props) {\n  const getStatusIcon = () => {\n    switch (target.status) {\n      case 'running':\n        return <Activity className=\"h-5 w-5 text-[#3B82F6] animate-pulse\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-900 rounded-lg border border-gray-800 p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          {getStatusIcon()}\n          <div>\n            <h3 className=\"text-white font-medium\">{target.host}</h3>\n            <p className=\"text-sm text-gray-400\">\n              {target.service} - Port {target.port}\n            </p>\n          </div>\n        </div>\n        <button\n          onClick={() => onRemove(target.id)}\n          className=\"text-gray-400 hover:text-white\"\n        >\n          <XCircle className=\"h-5 w-5\" />\n        </button>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-400\">Status</span>\n          <span\n            className={clsx(\n              'capitalize',\n              target.status === 'running' && 'text-[#3B82F6]',\n              target.status === 'completed' && 'text-green-500',\n              target.status === 'failed' && 'text-red-500',\n              target.status === 'pending' && 'text-yellow-500'\n            )}\n          >\n            {target.status}\n          </span>\n        </div>\n\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-400\">Started</span>\n          <span className=\"text-white\">\n            {formatDistanceToNow(new Date(target.createdAt), { addSuffix: true })}\n          </span>\n        </div>\n\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-400\">Success Rate</span>\n          <span className=\"text-white\">\n            {((target.successCount / Math.max(target.attempts, 1)) * 100).toFixed(1)}%\n          </span>\n        </div>\n\n        {target.successCount > 0 && (\n          <div className=\"mt-3 flex items-center justify-between text-sm\">\n            <span className=\"text-green-500\">Credentials Found</span>\n            <span className=\"text-green-500 font-medium\">{target.successCount}</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { Plus } from 'lucide-react';\nimport { useBruteForceStore } from '../stores/bruteforceStore';\nimport { NewAttackModal } from '../components/bruteforce/NewAttackModal';\nimport { AttackCard } from '../components/bruteforce/AttackCard';\n\nexport default function BruteForce() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { targets, removeTarget } = useBruteForceStore();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-white\">Brute Force</h1>\n          <p className=\"text-gray-400 mt-1\">\n            Test login credential strength for various services\n          </p>\n        </div>\n        <button\n          onClick={() => setIsModalOpen(true)}\n          className=\"flex items-center space-x-2 px-4 py-2 bg-[#8B5CF6] text-white rounded-md hover:bg-[#7C3AED]\"\n        >\n          <Plus className=\"h-5 w-5\" />\n          <span>New Attack</span>\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {targets.map((target) => (\n          <AttackCard\n            key={target.id}\n            target={target}\n            onRemove={removeTarget}\n          />\n        ))}\n        {targets.length === 0 && (\n          <div className=\"col-span-full flex flex-col items-center justify-center py-12 bg-gray-900 rounded-lg border border-gray-800\">\n            <div className=\"text-gray-400 text-center\">\n              <p className=\"mt-2\">No brute force attacks running</p>\n              <button\n                onClick={() => setIsModalOpen(true)}\n                className=\"mt-4 text-[#8B5CF6] hover:text-[#7C3AED]\"\n              >\n                Start your first attack\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <NewAttackModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n      />\n    </div>\n  );\n}"],"names":["useBruteForceStore","create","set","host","port","service","newTarget","state","id","target","updates","NewAttackModal","isOpen","onClose","setHost","useState","setPort","setService","addTarget","handleSubmit","e","Dialog","jsx","jsxs","X","AttackCard","onRemove","getStatusIcon","Activity","CheckCircle","XCircle","AlertTriangle","clsx","BruteForce","isModalOpen","setIsModalOpen","targets","removeTarget","Plus"],"mappings":"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"}